// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using CamMaster.Persistence.Models;

namespace CamMaster.Persistence.Context
{
    public partial class CamMasterContext : DbContext
    {
        public CamMasterContext(DbContextOptions<CamMasterContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AirCard> AirCards { get; set; }
        public virtual DbSet<C1File> C1Files { get; set; }
        public virtual DbSet<C2File> C2Files { get; set; }
        public virtual DbSet<C3File> C3Files { get; set; }
        public virtual DbSet<CamStationLoginsLog> CamStationLoginsLogs { get; set; }
        public virtual DbSet<CamStationNote> CamStationNotes { get; set; }
        public virtual DbSet<Camera> Cameras { get; set; }
        public virtual DbSet<CamviewLoginLog> CamviewLoginLogs { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContactNote> ContactNotes { get; set; }
        public virtual DbSet<ContactProspect> ContactProspects { get; set; }
        public virtual DbSet<ContactSite> ContactSites { get; set; }
        public virtual DbSet<DecisionMakerRole> DecisionMakerRoles { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<FaceToFace> FaceToFaces { get; set; }
        public virtual DbSet<FingerprintTemplate> FingerprintTemplates { get; set; }
        public virtual DbSet<Gp> Gps { get; set; }
        public virtual DbSet<Incident> Incidents { get; set; }
        public virtual DbSet<Industry> Industries { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<LiveDemonstration> LiveDemonstrations { get; set; }
        public virtual DbSet<MaintenanceSolarPanel> MaintenanceSolarPanels { get; set; }
        public virtual DbSet<MaintenanceUnit> MaintenanceUnits { get; set; }
        public virtual DbSet<Nvr> Nvrs { get; set; }
        public virtual DbSet<Password> Passwords { get; set; }
        public virtual DbSet<PoliceDepartment> PoliceDepartments { get; set; }
        public virtual DbSet<PresetPtz> PresetPtzs { get; set; }
        public virtual DbSet<Proposal> Proposals { get; set; }
        public virtual DbSet<ProposalUnit> ProposalUnits { get; set; }
        public virtual DbSet<Prospect> Prospects { get; set; }
        public virtual DbSet<PtzSetting> PtzSettings { get; set; }
        public virtual DbSet<Referral> Referrals { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleUser> RoleUsers { get; set; }
        public virtual DbSet<Router> Routers { get; set; }
        public virtual DbSet<SimCard> SimCards { get; set; }
        public virtual DbSet<Site> Sites { get; set; }
        public virtual DbSet<SolarPanel> SolarPanels { get; set; }
        public virtual DbSet<SolarPanelFile> SolarPanelFiles { get; set; }
        public virtual DbSet<Station> Stations { get; set; }
        public virtual DbSet<StationUnit> StationUnits { get; set; }
        public virtual DbSet<SupervisorCamera> SupervisorCameras { get; set; }
        public virtual DbSet<Telephone> Telephones { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitFile> UnitFiles { get; set; }
        public virtual DbSet<UnitLocation> UnitLocations { get; set; }
        public virtual DbSet<Update> Updates { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VoltageLog> VoltageLogs { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=liveguardtech_db1;Integrated Security=true");

            modelBuilder.Entity<AirCard>(entity =>
            {
                entity.ToTable("air_cards");

                entity.HasIndex(e => e.Imei, "UQ__air_card__8DF371FD37144B6E")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Brand)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("brand");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Imei)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IMEI");

                entity.Property(e => e.Model)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("model");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.AirCards)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_air_cards_units");
            });

            modelBuilder.Entity<C1File>(entity =>
            {
                entity.ToTable("c1_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProposalUnitId).HasColumnName("proposal_unit_id");

                entity.Property(e => e.Size)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("size");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.ProposalUnit)
                    .WithMany(p => p.C1Files)
                    .HasForeignKey(d => d.ProposalUnitId)
                    .HasConstraintName("FK_c1_files_proposal_units");
            });

            modelBuilder.Entity<C2File>(entity =>
            {
                entity.ToTable("c2_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProposalUnitId).HasColumnName("proposal_unit_id");

                entity.Property(e => e.Size)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("size");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.ProposalUnit)
                    .WithMany(p => p.C2Files)
                    .HasForeignKey(d => d.ProposalUnitId)
                    .HasConstraintName("FK_c2_files_proposal_units");
            });

            modelBuilder.Entity<C3File>(entity =>
            {
                entity.ToTable("c3_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.ProposalUnitId).HasColumnName("proposal_unit_id");

                entity.Property(e => e.Size)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("size");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.ProposalUnit)
                    .WithMany(p => p.C3Files)
                    .HasForeignKey(d => d.ProposalUnitId)
                    .HasConstraintName("FK_c3_files_proposal_units");
            });

            modelBuilder.Entity<CamStationLoginsLog>(entity =>
            {
                entity.ToTable("cam_station_logins_log");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("date");

                entity.Property(e => e.IdEmployee).HasColumnName("id_employee");

                entity.Property(e => e.Station)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("station");

                entity.HasOne(d => d.IdEmployeeNavigation)
                    .WithMany(p => p.CamStationLoginsLogs)
                    .HasForeignKey(d => d.IdEmployee)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cam_station_logins_log_employees");
            });

            modelBuilder.Entity<CamStationNote>(entity =>
            {
                entity.ToTable("cam_station_notes");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("date");

                entity.Property(e => e.EmployeeId).HasColumnName("employee_id");

                entity.Property(e => e.Message)
                    .IsRequired()
                    .HasColumnName("message");

                entity.Property(e => e.Site)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("site");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CamStationNotes)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cam_station_notes_employees");
            });

            modelBuilder.Entity<Camera>(entity =>
            {
                entity.ToTable("cameras");

                entity.HasIndex(e => e.SerialNumber, "UQ__cameras__BED14FEE3D112F11")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Channel).HasColumnName("channel");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Memory)
                    .HasColumnType("numeric(10, 0)")
                    .HasColumnName("memory");

                entity.Property(e => e.Microphone).HasColumnName("microphone");

                entity.Property(e => e.Model)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("model");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.Port).HasColumnName("port");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial_number");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.Property(e => e.Version)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("version");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Cameras)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_cameras_units");
            });

            modelBuilder.Entity<CamviewLoginLog>(entity =>
            {
                entity.ToTable("camview_login_logs");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LoginDate)
                    .HasColumnType("datetime")
                    .HasColumnName("login_date")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.LoginType)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("login_type");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.SiteId).HasColumnName("site_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.CamviewLoginLogs)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_camview_login_logs_sites");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.ToTable("clients");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Approved).HasColumnName("approved");

                entity.Property(e => e.BillingAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("billing_address");

                entity.Property(e => e.BillingCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("billing_city");

                entity.Property(e => e.BillingCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billing_country");

                entity.Property(e => e.BillingState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billing_state");

                entity.Property(e => e.BillingZipCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("billing_zip_code");

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.StartDate)
                    .HasColumnType("date")
                    .HasColumnName("start_date");

                entity.Property(e => e.TerminationDate)
                    .HasColumnType("date")
                    .HasColumnName("termination_date");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_clients_leads");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.ToTable("companies");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.ToTable("contacts");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("email");

                entity.Property(e => e.LastName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("last_name");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Nickname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("nickname");

                entity.Property(e => e.Position)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("position");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<ContactNote>(entity =>
            {
                entity.ToTable("contact_notes");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Notes)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ContactNotes)
                    .HasForeignKey(d => d.ContactId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contact_notes_contacts");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContactNotes)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_contact_notes_users");
            });

            modelBuilder.Entity<ContactProspect>(entity =>
            {
                entity.ToTable("contact_prospect");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.FaceToFace).HasColumnName("face_to_face");

                entity.Property(e => e.LiveDemonstration).HasColumnName("live_demonstration");

                entity.Property(e => e.ProspectId).HasColumnName("prospect_id");

                entity.Property(e => e.Site).HasColumnName("site");

                entity.Property(e => e.Typee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("typee");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ContactProspects)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_contact_prospect_contacts");

                entity.HasOne(d => d.Prospect)
                    .WithMany(p => p.ContactProspects)
                    .HasForeignKey(d => d.ProspectId)
                    .HasConstraintName("FK_contact_prospect_prospects");
            });

            modelBuilder.Entity<ContactSite>(entity =>
            {
                entity.ToTable("contact_site");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CallingOrder)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("calling_order");

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.SiteId).HasColumnName("site_id");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ContactSites)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_contact_site_contacts");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.ContactSites)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_contact_site_sites");
            });

            modelBuilder.Entity<DecisionMakerRole>(entity =>
            {
                entity.ToTable("decision_maker_roles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.IndustryId).HasColumnName("industry_id");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Industry)
                    .WithMany(p => p.DecisionMakerRoles)
                    .HasForeignKey(d => d.IndustryId)
                    .HasConstraintName("FK_decision_maker_roles_industries");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.ToTable("departments");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Details)
                    .HasMaxLength(30)
                    .HasColumnName("details");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.ToTable("employees");

                entity.HasIndex(e => e.Username, "IX_employees")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("id");

                entity.Property(e => e.AuthorizationLevel).HasColumnName("authorization_level");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.DepartmentId).HasColumnName("department_id");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(20)
                    .HasColumnName("password");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Username)
                    .HasMaxLength(80)
                    .HasColumnName("username");

                entity.HasOne(d => d.Department)
                    .WithMany(p => p.Employees)
                    .HasForeignKey(d => d.DepartmentId)
                    .HasConstraintName("FK_employees_departments");
            });

            modelBuilder.Entity<FaceToFace>(entity =>
            {
                entity.ToTable("face_to_faces");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Place)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("place");

                entity.Property(e => e.Time)
                    .HasColumnType("time(0)")
                    .HasColumnName("time");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.FaceToFaces)
                    .HasForeignKey(d => d.LeadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_face_to_faces_leads");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.FaceToFaces)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_face_to_faces_users");
            });

            modelBuilder.Entity<FingerprintTemplate>(entity =>
            {
                entity.ToTable("fingerprint_templates");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.EmployeeId).HasColumnName("employee_id");

                entity.Property(e => e.Image1Base64)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .HasColumnName("image1_base64");

                entity.Property(e => e.Image2Base64)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .HasColumnName("image2_base64");

                entity.Property(e => e.Image3Base64)
                    .IsRequired()
                    .HasMaxLength(2000)
                    .HasColumnName("image3_base64");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.FingerprintTemplates)
                    .HasForeignKey(d => d.EmployeeId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Gp>(entity =>
            {
                entity.ToTable("gps");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Alert).HasColumnName("alert");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Latitude)
                    .HasMaxLength(20)
                    .HasColumnName("latitude");

                entity.Property(e => e.Longitude)
                    .HasMaxLength(20)
                    .HasColumnName("longitude");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");
            });

            modelBuilder.Entity<Incident>(entity =>
            {
                entity.ToTable("Incident", "v2");

                entity.Property(e => e.Expired)
                    .IsRequired()
                    .HasDefaultValueSql("convert([bit],(0),(0))");

                entity.Property(e => e.HostName)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasDefaultValueSql("'n/a'");

                entity.Property(e => e.Message).IsRequired();
            });

            modelBuilder.Entity<Industry>(entity =>
            {
                entity.ToTable("industries");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<Lead>(entity =>
            {
                entity.ToTable("leads");

                entity.HasIndex(e => e.Project, "UQ__leads__A0D5F2B6101AFD34")
                    .IsUnique();

                entity.HasIndex(e => e.Project, "UQ__leads__A0D5F2B628E940AA")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CompanyId).HasColumnName("company_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.IndustryId).HasColumnName("industry_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Project)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("project");

                entity.Property(e => e.ReferralId).HasColumnName("referral_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Company)
                    .WithMany(p => p.Leads)
                    .HasForeignKey(d => d.CompanyId)
                    .HasConstraintName("FK_leads_companies");

                entity.HasOne(d => d.Industry)
                    .WithMany(p => p.Leads)
                    .HasForeignKey(d => d.IndustryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_leads_industries");

                entity.HasOne(d => d.Referral)
                    .WithMany(p => p.Leads)
                    .HasForeignKey(d => d.ReferralId)
                    .HasConstraintName("FK_leads_referrals");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Leads)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_leads_users");
            });

            modelBuilder.Entity<LiveDemonstration>(entity =>
            {
                entity.ToTable("live_demonstrations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.Place)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("place");

                entity.Property(e => e.Time)
                    .HasColumnType("time(0)")
                    .HasColumnName("time");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.LiveDemonstrations)
                    .HasForeignKey(d => d.LeadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_live_demonstrations_leads");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LiveDemonstrations)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_live_demonstrations_users");
            });

            modelBuilder.Entity<MaintenanceSolarPanel>(entity =>
            {
                entity.ToTable("maintenance_solar_panels");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.BatteryStatus).HasColumnName("battery_status");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.DatailsSolarPanel)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("datails_solar_panel");

                entity.Property(e => e.PanelStatus).HasColumnName("panel_status");

                entity.Property(e => e.SolarPanelId).HasColumnName("solar_panel_id");

                entity.Property(e => e.SunsaverStatus).HasColumnName("sunsaver_status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.SolarPanel)
                    .WithMany(p => p.MaintenanceSolarPanels)
                    .HasForeignKey(d => d.SolarPanelId)
                    .HasConstraintName("FK__maintenan__solar__06D7F1EF");
            });

            modelBuilder.Entity<MaintenanceUnit>(entity =>
            {
                entity.ToTable("maintenance_units");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AircardStatus).HasColumnName("aircard_status");

                entity.Property(e => e.ArduinoStatus).HasColumnName("arduino_status");

                entity.Property(e => e.CamerasStatus).HasColumnName("cameras_status");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.DetailsUnit)
                    .HasMaxLength(400)
                    .IsUnicode(false)
                    .HasColumnName("details_unit");

                entity.Property(e => e.MicriphoneStatus).HasColumnName("micriphone_status");

                entity.Property(e => e.RouterStatus).HasColumnName("router_status");

                entity.Property(e => e.SpeakerStatus).HasColumnName("speaker_status");

                entity.Property(e => e.StickerStatus).HasColumnName("sticker_status");

                entity.Property(e => e.StrobeStatus).HasColumnName("strobe_status");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.MaintenanceUnits)
                    .HasForeignKey(d => d.UnitId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__maintenan__unit___04EFA97D");
            });

            modelBuilder.Entity<Nvr>(entity =>
            {
                entity.ToTable("nvrs");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Channels).HasColumnName("channels");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Ip)
                    .HasMaxLength(20)
                    .HasColumnName("IP");

                entity.Property(e => e.Name)
                    .HasMaxLength(30)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .HasMaxLength(30)
                    .HasColumnName("password");

                entity.Property(e => e.Port).HasColumnName("port");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(30)
                    .HasColumnName("serial_number");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Username)
                    .HasMaxLength(30)
                    .HasColumnName("username");

                entity.Property(e => e.Version)
                    .HasMaxLength(30)
                    .HasColumnName("version");
            });

            modelBuilder.Entity<Password>(entity =>
            {
                entity.ToTable("passwords");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Password1)
                    .HasMaxLength(200)
                    .HasColumnName("password");

                entity.Property(e => e.SiteId).HasColumnName("site_id");

                entity.Property(e => e.Type)
                    .HasMaxLength(200)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.Passwords)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_passwords_sites");
            });

            modelBuilder.Entity<PoliceDepartment>(entity =>
            {
                entity.ToTable("police_departments");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Number)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<PresetPtz>(entity =>
            {
                entity.ToTable("preset_ptz");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Horizontal).HasColumnName("horizontal");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.Vertical).HasColumnName("vertical");

                entity.Property(e => e.Zoom).HasColumnName("zoom");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.PresetPtzs)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_preset_ptz_units");
            });

            modelBuilder.Entity<Proposal>(entity =>
            {
                entity.ToTable("proposals");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.Lease)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("lease");

                entity.Property(e => e.Monitoring)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("monitoring");

                entity.Property(e => e.MonitoringCategory)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("monitoring_category");

                entity.Property(e => e.MonthlyDiscount)
                    .HasColumnType("numeric(2, 0)")
                    .HasColumnName("monthly_discount");

                entity.Property(e => e.MonthlySubtotal)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("monthly_subtotal");

                entity.Property(e => e.MonthlyTotal)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("monthly_total");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.PurchaseTotal)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("purchase_total");

                entity.Property(e => e.SetupFee)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("setup_fee");

                entity.Property(e => e.SpecialDiscount)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("special_discount");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.Proposals)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_proposals_leads");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Proposals)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_proposals_users");
            });

            modelBuilder.Entity<ProposalUnit>(entity =>
            {
                entity.ToTable("proposal_units");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("latitude");

                entity.Property(e => e.Lease)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("lease");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("longitude");

                entity.Property(e => e.ProposalId).HasColumnName("proposal_id");

                entity.Property(e => e.SolarPanel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("solar_panel");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Proposal)
                    .WithMany(p => p.ProposalUnits)
                    .HasForeignKey(d => d.ProposalId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_proposal_units_proposals");
            });

            modelBuilder.Entity<Prospect>(entity =>
            {
                entity.ToTable("prospects");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.DmAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("dm_address");

                entity.Property(e => e.DmCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("dm_city");

                entity.Property(e => e.DmCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dm_country");

                entity.Property(e => e.DmState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dm_state");

                entity.Property(e => e.DmZipCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("dm_zip_code");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.Notes)
                    .HasMaxLength(600)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.SiteAddress)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("site_address");

                entity.Property(e => e.SiteCity)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("site_city");

                entity.Property(e => e.SiteCountry)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("site_country");

                entity.Property(e => e.SiteLatitude)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("site_latitude");

                entity.Property(e => e.SiteLongitude)
                    .HasColumnType("decimal(9, 6)")
                    .HasColumnName("site_longitude");

                entity.Property(e => e.SiteState)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("site_state");

                entity.Property(e => e.SiteZipCode)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("site_zip_code");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.Prospects)
                    .HasForeignKey(d => d.LeadId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_prospects_leads");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Prospects)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_prospects_users");
            });

            modelBuilder.Entity<PtzSetting>(entity =>
            {
                entity.ToTable("ptz_settings");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CameraId).HasColumnName("camera_id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Param1).HasColumnName("param1");

                entity.Property(e => e.Param2).HasColumnName("param2");

                entity.Property(e => e.Param3).HasColumnName("param3");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at")
                    .HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Camera)
                    .WithMany(p => p.PtzSettings)
                    .HasForeignKey(d => d.CameraId)
                    .HasConstraintName("FK_ptz_settings_cameras");
            });

            modelBuilder.Entity<Referral>(entity =>
            {
                entity.ToTable("referrals");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.ToTable("reports");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AnyoneInjured).HasColumnName("anyone_injured");

                entity.Property(e => e.Cause)
                    .HasMaxLength(200)
                    .HasColumnName("cause");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Date)
                    .HasColumnType("date")
                    .HasColumnName("date");

                entity.Property(e => e.IncidentId).HasColumnName("incident_id");

                entity.Property(e => e.Location)
                    .HasMaxLength(50)
                    .HasColumnName("location");

                entity.Property(e => e.MessagedClient).HasColumnName("messaged_client");

                entity.Property(e => e.OthersPresent).HasColumnName("others_present");

                entity.Property(e => e.Perpetrator)
                    .HasMaxLength(200)
                    .HasColumnName("perpetrator");

                entity.Property(e => e.PoliceInformed).HasColumnName("police_informed");

                entity.Property(e => e.PropertyDamage).HasColumnName("property_damage");

                entity.Property(e => e.Report1).HasColumnName("report");

                entity.Property(e => e.ReportNumber)
                    .HasMaxLength(50)
                    .HasColumnName("report_number");

                entity.Property(e => e.SentVideo).HasColumnName("sent_video");

                entity.Property(e => e.SiteId).HasColumnName("site_id");

                entity.Property(e => e.StayLinePolice).HasColumnName("stay_line_police");

                entity.Property(e => e.Time)
                    .HasColumnType("time(1)")
                    .HasColumnName("time");

                entity.Property(e => e.TypesInjuries)
                    .HasMaxLength(50)
                    .HasColumnName("types_injuries");

                entity.Property(e => e.VideoHd).HasColumnName("video_HD");

                entity.Property(e => e.VideoLd).HasColumnName("video_LD");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.ToTable("roles");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Description)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("description");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<RoleUser>(entity =>
            {
                entity.ToTable("role_user");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RoleId).HasColumnName("role_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.RoleUsers)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_role_user_roles");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoleUsers)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_role_user_users");
            });

            modelBuilder.Entity<Router>(entity =>
            {
                entity.ToTable("routers");

                entity.HasIndex(e => e.SerialNumber, "UQ__routers__BED14FEEAE242CCD")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.FactoryPassword)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("factory_password");

                entity.Property(e => e.Model)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("model");

                entity.Property(e => e.Password)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial_number");

                entity.Property(e => e.Signal).HasColumnName("signal");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Version)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("version");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.Routers)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_routers_units");
            });

            modelBuilder.Entity<SimCard>(entity =>
            {
                entity.ToTable("sim_cards");

                entity.HasIndex(e => e.Ip, "UQ__sim_card__3214EC2A2959F205")
                    .IsUnique();

                entity.HasIndex(e => e.SerialNumber, "UQ__sim_card__BED14FEE4CE6EAFF")
                    .IsUnique();

                entity.HasIndex(e => e.SerialNumber, "UQ__sim_card__BED14FEE8BCBFA35")
                    .IsUnique();

                entity.HasIndex(e => e.SerialNumber, "UQ__sim_card__BED14FEEBF4D2C6D")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Apn)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("APN");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Ip)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("IP");

                entity.Property(e => e.NvrId).HasColumnName("nvr_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("phone");

                entity.Property(e => e.Provider)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("provider");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial_number");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Nvr)
                    .WithMany(p => p.SimCards)
                    .HasForeignKey(d => d.NvrId)
                    .HasConstraintName("FK_sim_cards_nvrs");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.SimCards)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_sim_cards_units");
            });

            modelBuilder.Entity<Site>(entity =>
            {
                entity.ToTable("sites");

                entity.HasIndex(e => e.Name, "UQ__sites__72E12F1B2543BAE5")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UQ__sites__72E12F1B47C3050F")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UQ__sites__72E12F1BC5331847")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UQ__sites__72E12F1BE917C24D")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UQ__sites__72E12F1BFC221487")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Details)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("details");

                entity.Property(e => e.LeadId).HasColumnName("lead_id");

                entity.Property(e => e.MonitoringSchedule)
                    .HasMaxLength(4000)
                    .IsUnicode(false)
                    .HasColumnName("monitoring_schedule");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.PoliceDepartmentId).HasColumnName("police_department_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Username)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.Sites)
                    .HasForeignKey(d => d.LeadId)
                    .HasConstraintName("FK_sites_leads");

                entity.HasOne(d => d.PoliceDepartment)
                    .WithMany(p => p.Sites)
                    .HasForeignKey(d => d.PoliceDepartmentId)
                    .HasConstraintName("FK_sites_police_departments");
            });

            modelBuilder.Entity<SolarPanel>(entity =>
            {
                entity.ToTable("solar_panels");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Battery1Date)
                    .HasColumnType("date")
                    .HasColumnName("battery1_date");

                entity.Property(e => e.Battery1Serial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("battery1_serial");

                entity.Property(e => e.Battery2Date)
                    .HasColumnType("date")
                    .HasColumnName("battery2_date");

                entity.Property(e => e.Battery2Serial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("battery2_serial");

                entity.Property(e => e.Capacity)
                    .HasColumnType("numeric(5, 0)")
                    .HasColumnName("capacity");

                entity.Property(e => e.Company)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("company");

                entity.Property(e => e.CountryOrigin)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("country_origin");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Notes)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("notes");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial_number");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.SunsaverModel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sunsaver_model");

                entity.Property(e => e.SunsaverSerial)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("sunsaver_serial");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.SolarPanels)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_solar_panels_units");
            });

            modelBuilder.Entity<SolarPanelFile>(entity =>
            {
                entity.ToTable("solar_panel_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Size)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("size");

                entity.Property(e => e.SolarPanelId).HasColumnName("solar_panel_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.SolarPanel)
                    .WithMany(p => p.SolarPanelFiles)
                    .HasForeignKey(d => d.SolarPanelId)
                    .HasConstraintName("FK_solar_panel_files_solar_panels");
            });

            modelBuilder.Entity<Station>(entity =>
            {
                entity.ToTable("stations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Details)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("details");

                entity.Property(e => e.Name)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Status)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");
            });

            modelBuilder.Entity<StationUnit>(entity =>
            {
                entity.ToTable("station_unit");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.StationId).HasColumnName("station_id");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.HasOne(d => d.Station)
                    .WithMany(p => p.StationUnits)
                    .HasForeignKey(d => d.StationId)
                    .HasConstraintName("FK_station_unit_stations");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.StationUnits)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_station_unit_units");
            });

            modelBuilder.Entity<SupervisorCamera>(entity =>
            {
                entity.ToTable("supervisor_cameras");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ChannelCamera).HasColumnName("channel_camera");

                entity.Property(e => e.Date)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("date");

                entity.Property(e => e.IdEmployee).HasColumnName("id_Employee");

                entity.Property(e => e.IncidentId).HasColumnName("incident_id");

                entity.Property(e => e.NvrIp)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("Nvr_IP");

                entity.Property(e => e.Reason)
                    .HasMaxLength(255)
                    .IsUnicode(false)
                    .HasColumnName("reason");

                entity.Property(e => e.SeenSupervisor)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("seen_supervisor");

                entity.Property(e => e.SendSupervisor)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("send_Supervisor");

                entity.Property(e => e.Supervisor).HasColumnName("supervisor");

                entity.Property(e => e.Zone).HasColumnName("zone");
            });

            modelBuilder.Entity<Telephone>(entity =>
            {
                entity.ToTable("telephones");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ContactId).HasColumnName("contact_id");

                entity.Property(e => e.CountryCode)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("country_code");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Extension)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("extension");

                entity.Property(e => e.Number)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("number");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.Telephones)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("FK_telephones_contacts");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.ToTable("units");

                entity.HasIndex(e => e.SerialNumber, "UQ__units__BED14FEEB5A04F55")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ArduinoVersion)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("arduino_version");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Details)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasColumnName("details");

                entity.Property(e => e.LocationDescription)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("location_description");

                entity.Property(e => e.SerialNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("serial_number");

                entity.Property(e => e.SiteId).HasColumnName("site_id");

                entity.Property(e => e.Status)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("status");

                entity.Property(e => e.Type)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("type");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Site)
                    .WithMany(p => p.Units)
                    .HasForeignKey(d => d.SiteId)
                    .HasConstraintName("FK_units_sites");
            });

            modelBuilder.Entity<UnitFile>(entity =>
            {
                entity.ToTable("unit_files");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Size)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("size");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.UnitFiles)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_unit_files_units");
            });

            modelBuilder.Entity<UnitLocation>(entity =>
            {
                entity.ToTable("unit_locations");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Latitude)
                    .HasColumnType("decimal(12, 8)")
                    .HasColumnName("latitude");

                entity.Property(e => e.Longitude)
                    .HasColumnType("decimal(12, 8)")
                    .HasColumnName("longitude");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.UnitLocations)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_unit_locations_units");
            });

            modelBuilder.Entity<Update>(entity =>
            {
                entity.ToTable("updates");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.FieldName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("field_name");

                entity.Property(e => e.NewField)
                    .IsUnicode(false)
                    .HasColumnName("new_field");

                entity.Property(e => e.ObjectId).HasColumnName("object_id");

                entity.Property(e => e.OldField)
                    .IsUnicode(false)
                    .HasColumnName("old_field");

                entity.Property(e => e.TableName)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("table_name");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Updates)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_cammaster_log_users");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.ToTable("users");

                entity.HasIndex(e => e.Username, "IX_users_username")
                    .IsUnique();

                entity.HasIndex(e => e.Username, "users_email_unique")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Active).HasColumnName("active");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.LastName)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("last_name");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("name");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(350)
                    .IsUnicode(false)
                    .HasColumnName("password");

                entity.Property(e => e.RememberToken)
                    .HasMaxLength(100)
                    .HasColumnName("remember_token");

                entity.Property(e => e.UpdatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("updated_at");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("username");
            });

            modelBuilder.Entity<VoltageLog>(entity =>
            {
                entity.ToTable("voltage_log");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasColumnName("created_at");

                entity.Property(e => e.Status).HasColumnName("status");

                entity.Property(e => e.UnitId).HasColumnName("unit_id");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.VoltageLogs)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_voltage_log_units");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}